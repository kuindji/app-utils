import type { ActionResponse, ListenerSignature } from "../action";
import type { BaseActionsMap } from "../actionBus";
import type { ErrorListenerSignature, ErrorResponse } from "../lib/types";
export type { ActionResponse, BaseActionsMap, ErrorListenerSignature, ErrorResponse, ListenerSignature, };
export declare function useActionBus<ActionsMap extends BaseActionsMap = BaseActionsMap>(initialActions?: ActionsMap, errorListener?: ErrorListenerSignature<any[]>): import("../lib/types").ApiType<import("../actionBus").ActionBusDefinitionHelper<ActionsMap>, {
    readonly add: (name: import("../lib/types").MapKey, action: import("../lib/types").BaseHandler) => void;
    readonly get: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K) => { [key_1 in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key_1]] extends [never] ? never : import("../lib/types").ApiType<import("../action").ActionDefinitionHelper<ActionsMap[key_1]>, {
        readonly invoke: (...args: Parameters<ActionsMap[key_1]>) => Promise<ActionResponse<Awaited<ReturnType<ActionsMap[key_1]>>, Parameters<ActionsMap[key_1]>>>;
        readonly addListener: (handler: ListenerSignature<ActionsMap[key_1]>, listenerOptions?: import("..").ListenerOptions) => void;
        readonly on: (handler: ListenerSignature<ActionsMap[key_1]>, listenerOptions?: import("..").ListenerOptions) => void;
        readonly subscribe: (handler: ListenerSignature<ActionsMap[key_1]>, listenerOptions?: import("..").ListenerOptions) => void;
        readonly listen: (handler: ListenerSignature<ActionsMap[key_1]>, listenerOptions?: import("..").ListenerOptions) => void;
        readonly removeAllListeners: (tag?: string) => void;
        readonly removeListener: (handler: ListenerSignature<ActionsMap[key_1]>, context?: object | null, tag?: string | null) => boolean;
        readonly un: (handler: ListenerSignature<ActionsMap[key_1]>, context?: object | null, tag?: string | null) => boolean;
        readonly off: (handler: ListenerSignature<ActionsMap[key_1]>, context?: object | null, tag?: string | null) => boolean;
        readonly remove: (handler: ListenerSignature<ActionsMap[key_1]>, context?: object | null, tag?: string | null) => boolean;
        readonly unsubscribe: (handler: ListenerSignature<ActionsMap[key_1]>, context?: object | null, tag?: string | null) => boolean;
        readonly promise: (options?: import("..").ListenerOptions) => Promise<[arg: ActionResponse<Awaited<ReturnType<ActionsMap[key_1]>>, Parameters<ActionsMap[key_1]>>]>;
        readonly addErrorListener: (handler: ErrorListenerSignature<Parameters<ActionsMap[key_1]>>, listenerOptions?: import("..").ListenerOptions) => void;
        readonly removeAllErrorListeners: (tag?: string) => void;
        readonly removeErrorListener: (handler: ErrorListenerSignature<Parameters<ActionsMap[key_1]>>, context?: object | null, tag?: string | null) => boolean;
        readonly errorPromise: (options?: import("..").ListenerOptions) => Promise<[errorResponse: ErrorResponse<Parameters<ActionsMap[key_1]>>]>;
    }>; }[K];
    readonly invoke: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, ...args: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["actionArguments"]) => Promise<ActionResponse<Awaited<ReturnType<ActionsMap[K]>>, Parameters<ActionsMap[K]>>>;
    readonly addListener: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], options?: import("..").ListenerOptions) => void;
    readonly on: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], options?: import("..").ListenerOptions) => void;
    readonly subscribe: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], options?: import("..").ListenerOptions) => void;
    readonly listen: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], options?: import("..").ListenerOptions) => void;
    readonly once: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], options?: import("..").ListenerOptions) => void;
    readonly removeListener: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], context?: object | null, tag?: string | null) => boolean;
    readonly off: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], context?: object | null, tag?: string | null) => boolean;
    readonly remove: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], context?: object | null, tag?: string | null) => boolean;
    readonly un: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], context?: object | null, tag?: string | null) => boolean;
    readonly unsubscribe: <K extends import("../lib/types").KeyOf<{ [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }>>(name: K, handler: { [key in import("../lib/types").KeyOf<ActionsMap>]: [ActionsMap[key]] extends [never] ? never : import("../action").ActionDefinitionHelper<ActionsMap[key]>; }[K]["listenerSignature"], context?: object | null, tag?: string | null) => boolean;
    readonly addErrorListener: (handler: ErrorListenerSignature<any[]>, listenerOptions?: import("..").ListenerOptions) => void;
    readonly removeErrorListener: (handler: ErrorListenerSignature<any[]>, context?: object | null, tag?: string | null) => boolean;
}>;
